/**
 * Generated by orval v6.6.3 üç∫
 * Do not edit manually.
 * angular-typescript-starter
 * BE
 * OpenAPI spec version: 1.0.0
 */
import useSwr,{
  SWRConfiguration,
  Key
} from 'swr'
import type {
  AuthPayload,
  AuthRequest,
  UserResponse,
  SearchUserParams,
  UserPayload,
  UserCreateReq,
  NonceReq,
  GetAllUsersParams,
  UserUpdateReq,
  GetUserByUserTypeParams,
  UserType
} from './model'
import { customInstance } from '../mutator/custom-instance'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const auth = (
    authRequest: AuthRequest,
 ) => {
      return customInstance<AuthPayload>(
      {url: `/auth`, method: 'post',
      data: authRequest
    },
      );
    }
  


export const searchUser = (
    params?: SearchUserParams,
 ) => {
      return customInstance<UserResponse>(
      {url: `/user/search`, method: 'get',
        params,
    },
      );
    }
  

export const getSearchUserKey = (params?: SearchUserParams,) => [`/user/search`, ...(params ? [params]: [])];

    
export const useSearchUser = <TError = unknown>(
 params?: SearchUserParams, options?: { swr?:SWRConfiguration<AsyncReturnType<typeof searchUser>, TError> & {swrKey: Key},  }

  ) => {

  const {swr: swrOptions} = options || {}

  const swrKey = swrOptions?.swrKey ?? (() => getSearchUserKey(params))
  const swrFn = () => searchUser(params, );

  const query = useSwr<AsyncReturnType<typeof swrFn>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


export const createUser = (
    userCreateReq: UserCreateReq,
 ) => {
      return customInstance<UserPayload>(
      {url: `/user/create`, method: 'post',
      data: userCreateReq
    },
      );
    }
  


export const getOrCreateNonce = (
    nonceReq: NonceReq,
 ) => {
      return customInstance<UserPayload>(
      {url: `/user/create/nonce`, method: 'post',
      data: nonceReq
    },
      );
    }
  


export const getAllUsers = (
    params?: GetAllUsersParams,
 ) => {
      return customInstance<UserPayload>(
      {url: `/user/list`, method: 'get',
        params,
    },
      );
    }
  

export const getGetAllUsersKey = (params?: GetAllUsersParams,) => [`/user/list`, ...(params ? [params]: [])];

    
export const useGetAllUsers = <TError = unknown>(
 params?: GetAllUsersParams, options?: { swr?:SWRConfiguration<AsyncReturnType<typeof getAllUsers>, TError> & {swrKey: Key},  }

  ) => {

  const {swr: swrOptions} = options || {}

  const swrKey = swrOptions?.swrKey ?? (() => getGetAllUsersKey(params))
  const swrFn = () => getAllUsers(params, );

  const query = useSwr<AsyncReturnType<typeof swrFn>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


export const getUser = (
    userId: string,
 ) => {
      return customInstance<UserPayload>(
      {url: `/user/detail/${userId}`, method: 'get'
    },
      );
    }
  

export const getGetUserKey = (userId: string,) => [`/user/detail/${userId}`];

    
export const useGetUser = <TError = unknown>(
 userId: string, options?: { swr?:SWRConfiguration<AsyncReturnType<typeof getUser>, TError> & {swrKey: Key},  }

  ) => {

  const {swr: swrOptions} = options || {}

  const isEnable = !!(userId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnable ? getGetUserKey(userId) : null);
  const swrFn = () => getUser(userId, );

  const query = useSwr<AsyncReturnType<typeof swrFn>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


export const updateUser = (
    userId: string,
    userUpdateReq: UserUpdateReq,
 ) => {
      return customInstance<UserPayload>(
      {url: `/user/update/${userId}`, method: 'put',
      data: userUpdateReq
    },
      );
    }
  


export const deleteUser = (
    userId: string,
 ) => {
      return customInstance<UserPayload>(
      {url: `/user/delete/${userId}`, method: 'delete'
    },
      );
    }
  


export const getUserByUserType = (
    usertype: UserType,
    params?: GetUserByUserTypeParams,
 ) => {
      return customInstance<UserPayload>(
      {url: `/user/${usertype}`, method: 'get',
        params,
    },
      );
    }
  

export const getGetUserByUserTypeKey = (usertype: UserType,
    params?: GetUserByUserTypeParams,) => [`/user/${usertype}`, ...(params ? [params]: [])];

    
export const useGetUserByUserType = <TError = unknown>(
 usertype: UserType,
    params?: GetUserByUserTypeParams, options?: { swr?:SWRConfiguration<AsyncReturnType<typeof getUserByUserType>, TError> & {swrKey: Key},  }

  ) => {

  const {swr: swrOptions} = options || {}

  const isEnable = !!(usertype)
  const swrKey = swrOptions?.swrKey ?? (() => isEnable ? getGetUserByUserTypeKey(usertype,params) : null);
  const swrFn = () => getUserByUserType(usertype,params, );

  const query = useSwr<AsyncReturnType<typeof swrFn>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


