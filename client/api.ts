/* tslint:disable */
/* eslint-disable */
/**
 * angular-typescript-starter
 * BE
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthPayload
 */
export interface AuthPayload {
    /**
     * 
     * @type {object}
     * @memberof AuthPayload
     */
    'user'?: object;
    /**
     * 
     * @type {string}
     * @memberof AuthPayload
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface AuthRequest
 */
export interface AuthRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    'password'?: string | null;
    /**
     * 
     * @type {AuthType}
     * @memberof AuthRequest
     */
    'authType': AuthType;
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    'signature'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    'publicKey'?: string | null;
}
/**
 * 
 * @export
 * @interface AuthResponses
 */
export interface AuthResponses {
    /**
     * 
     * @type {boolean}
     * @memberof AuthResponses
     */
    'success': boolean;
    /**
     * 
     * @type {AuthPayload}
     * @memberof AuthResponses
     */
    'payload'?: AuthPayload;
    /**
     * 
     * @type {any}
     * @memberof AuthResponses
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum AuthType {
    Standard = 'STANDARD',
    W3Wallet = 'W3_WALLET'
}

/**
 * 
 * @export
 * @interface NonceReq
 */
export interface NonceReq {
    /**
     * 
     * @type {string}
     * @memberof NonceReq
     */
    'publicKey': string;
}
/**
 * 
 * @export
 * @interface NullableUSERTYPE
 */
export interface NullableUSERTYPE {
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
 */
export interface PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt {
    /**
     * 
     * @type {string}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    'email': string;
    /**
     * 
     * @type {USERTYPE}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    'user_type': USERTYPE;
    /**
     * 
     * @type {string}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum USERTYPE {
    Admin = 'ADMIN',
    Staff = 'STAFF',
    User = 'USER'
}

/**
 * 
 * @export
 * @interface UserCreateReq
 */
export interface UserCreateReq {
    /**
     * 
     * @type {string}
     * @memberof UserCreateReq
     */
    'firstname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreateReq
     */
    'lastname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreateReq
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateReq
     */
    'password': string;
    /**
     * 
     * @type {NullableUSERTYPE}
     * @memberof UserCreateReq
     */
    'user_type'?: NullableUSERTYPE | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreateReq
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UserPayload
 */
export interface UserPayload {
    /**
     * 
     * @type {PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt}
     * @memberof UserPayload
     */
    'user'?: PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt;
    /**
     * 
     * @type {Array<PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt>}
     * @memberof UserPayload
     */
    'users'?: Array<PickIUserFirstnameOrLastnameOrUsernameOrEmailOrUserTypeOrCreatedAtOrUpdatedAt>;
    /**
     * 
     * @type {number}
     * @memberof UserPayload
     */
    'userLength'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserPayload
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserPayload
     */
    'nonce'?: string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {boolean}
     * @memberof UserResponse
     */
    'success': boolean;
    /**
     * 
     * @type {UserPayload}
     * @memberof UserResponse
     */
    'payload'?: UserPayload;
    /**
     * 
     * @type {any}
     * @memberof UserResponse
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface UserUpdateReq
 */
export interface UserUpdateReq {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateReq
     */
    'firstname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateReq
     */
    'lastname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateReq
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateReq
     */
    'password': string;
    /**
     * 
     * @type {NullableUSERTYPE}
     * @memberof UserUpdateReq
     */
    'user_type'?: NullableUSERTYPE | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateReq
     */
    'email': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth: async (authRequest: AuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authRequest' is not null or undefined
            assertParamExists('auth', 'authRequest', authRequest)
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auth(authRequest: AuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auth(authRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth(authRequest: AuthRequest, options?: any): AxiosPromise<AuthResponses> {
            return localVarFp.auth(authRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {AuthRequest} authRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public auth(authRequest: AuthRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).auth(authRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserCreateReq} userCreateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userCreateReq: UserCreateReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateReq' is not null or undefined
            assertParamExists('createUser', 'userCreateReq', userCreateReq)
            const localVarPath = `/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/user/delete/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NonceReq} nonceReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrCreateNonce: async (nonceReq: NonceReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nonceReq' is not null or undefined
            assertParamExists('getOrCreateNonce', 'nonceReq', nonceReq)
            const localVarPath = `/user/create/nonce`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nonceReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/user/detail/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {USERTYPE} userType 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUserType: async (userType: USERTYPE, username?: string, email?: string, firstName?: string, lastName?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userType' is not null or undefined
            assertParamExists('getUserByUserType', 'userType', userType)
            const localVarPath = `/user/{user_type}`
                .replace(`{${"user_type"}}`, encodeURIComponent(String(userType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUser: async (username?: string, email?: string, firstname?: string, lastname?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (firstname !== undefined) {
                localVarQueryParameter['firstname'] = firstname;
            }

            if (lastname !== undefined) {
                localVarQueryParameter['lastname'] = lastname;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {UserUpdateReq} userUpdateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, userUpdateReq: UserUpdateReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'userUpdateReq' is not null or undefined
            assertParamExists('updateUser', 'userUpdateReq', userUpdateReq)
            const localVarPath = `/user/update/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserCreateReq} userCreateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userCreateReq: UserCreateReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userCreateReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(pageNumber, pageSize, filter, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NonceReq} nonceReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrCreateNonce(nonceReq: NonceReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateNonce(nonceReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {USERTYPE} userType 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByUserType(userType: USERTYPE, username?: string, email?: string, firstName?: string, lastName?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByUserType(userType, username, email, firstName, lastName, pageNumber, pageSize, filter, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUser(username?: string, email?: string, firstname?: string, lastname?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchUser(username, email, firstname, lastname, pageNumber, pageSize, filter, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {UserUpdateReq} userUpdateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, userUpdateReq: UserUpdateReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, userUpdateReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {UserCreateReq} userCreateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userCreateReq: UserCreateReq, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.createUser(userCreateReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getAllUsers(pageNumber, pageSize, filter, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NonceReq} nonceReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrCreateNonce(nonceReq: NonceReq, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getOrCreateNonce(nonceReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {USERTYPE} userType 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUserType(userType: USERTYPE, username?: string, email?: string, firstName?: string, lastName?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getUserByUserType(userType, username, email, firstName, lastName, pageNumber, pageSize, filter, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUser(username?: string, email?: string, firstname?: string, lastname?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.searchUser(username, email, firstname, lastname, pageNumber, pageSize, filter, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {UserUpdateReq} userUpdateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: string, userUpdateReq: UserUpdateReq, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.updateUser(userId, userUpdateReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {UserCreateReq} userCreateReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUser(userCreateReq: UserCreateReq, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).createUser(userCreateReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUser(userId: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [filter] 
     * @param {string} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAllUsers(pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getAllUsers(pageNumber, pageSize, filter, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NonceReq} nonceReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getOrCreateNonce(nonceReq: NonceReq, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getOrCreateNonce(nonceReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(userId: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {USERTYPE} userType 
     * @param {string} [username] 
     * @param {string} [email] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [filter] 
     * @param {string} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserByUserType(userType: USERTYPE, username?: string, email?: string, firstName?: string, lastName?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserByUserType(userType, username, email, firstName, lastName, pageNumber, pageSize, filter, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [username] 
     * @param {string} [email] 
     * @param {string} [firstname] 
     * @param {string} [lastname] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [filter] 
     * @param {string} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public searchUser(username?: string, email?: string, firstname?: string, lastname?: string, pageNumber?: number, pageSize?: number, filter?: string, sortOrder?: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).searchUser(username, email, firstname, lastname, pageNumber, pageSize, filter, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {UserUpdateReq} userUpdateReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUser(userId: string, userUpdateReq: UserUpdateReq, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUser(userId, userUpdateReq, options).then((request) => request(this.axios, this.basePath));
    }
}


