/**
 * Generated by orval v6.6.3 🍺
 * Do not edit manually.
 * angular-typescript-starter
 * BE
 * OpenAPI spec version: 1.0.0
 */
import {
  rest
} from 'msw'
import faker from 'faker'

export const getAuthMock = () => ({success: faker.datatype.boolean(), payload: faker.helpers.randomize([{user: faker.helpers.randomize([{}, undefined]), token: faker.helpers.randomize([faker.random.word(), undefined])}, undefined])})

export const getSearchUserMock = () => ({success: faker.datatype.boolean(), payload: faker.helpers.randomize([{user: faker.helpers.randomize([{}, undefined]), users: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined]), userLength: faker.helpers.randomize([faker.datatype.number(), undefined]), token: faker.helpers.randomize([faker.random.word(), undefined]), nonce: faker.helpers.randomize([faker.random.word(), undefined])}, undefined]), message: faker.helpers.randomize([{}, undefined])})

export const getCreateUserMock = () => ({success: faker.datatype.boolean(), payload: faker.helpers.randomize([{user: faker.helpers.randomize([{}, undefined]), users: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined]), userLength: faker.helpers.randomize([faker.datatype.number(), undefined]), token: faker.helpers.randomize([faker.random.word(), undefined]), nonce: faker.helpers.randomize([faker.random.word(), undefined])}, undefined]), message: faker.helpers.randomize([{}, undefined])})

export const getGetOrCreateNonceMock = () => ({success: faker.datatype.boolean(), payload: faker.helpers.randomize([{user: faker.helpers.randomize([{}, undefined]), users: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined]), userLength: faker.helpers.randomize([faker.datatype.number(), undefined]), token: faker.helpers.randomize([faker.random.word(), undefined]), nonce: faker.helpers.randomize([faker.random.word(), undefined])}, undefined]), message: faker.helpers.randomize([{}, undefined])})

export const getGetAllUsersMock = () => ({success: faker.datatype.boolean(), payload: faker.helpers.randomize([{user: faker.helpers.randomize([{}, undefined]), users: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined]), userLength: faker.helpers.randomize([faker.datatype.number(), undefined]), token: faker.helpers.randomize([faker.random.word(), undefined]), nonce: faker.helpers.randomize([faker.random.word(), undefined])}, undefined]), message: faker.helpers.randomize([{}, undefined])})

export const getGetUserMock = () => ({success: faker.datatype.boolean(), payload: faker.helpers.randomize([{user: faker.helpers.randomize([{}, undefined]), users: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined]), userLength: faker.helpers.randomize([faker.datatype.number(), undefined]), token: faker.helpers.randomize([faker.random.word(), undefined]), nonce: faker.helpers.randomize([faker.random.word(), undefined])}, undefined]), message: faker.helpers.randomize([{}, undefined])})

export const getUpdateUserMock = () => ({success: faker.datatype.boolean(), payload: faker.helpers.randomize([{user: faker.helpers.randomize([{}, undefined]), users: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined]), userLength: faker.helpers.randomize([faker.datatype.number(), undefined]), token: faker.helpers.randomize([faker.random.word(), undefined]), nonce: faker.helpers.randomize([faker.random.word(), undefined])}, undefined]), message: faker.helpers.randomize([{}, undefined])})

export const getDeleteUserMock = () => ({success: faker.datatype.boolean(), payload: faker.helpers.randomize([{user: faker.helpers.randomize([{}, undefined]), users: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined]), userLength: faker.helpers.randomize([faker.datatype.number(), undefined]), token: faker.helpers.randomize([faker.random.word(), undefined]), nonce: faker.helpers.randomize([faker.random.word(), undefined])}, undefined]), message: faker.helpers.randomize([{}, undefined])})

export const getGetUserByUserTypeMock = () => ({success: faker.datatype.boolean(), payload: faker.helpers.randomize([{user: faker.helpers.randomize([{}, undefined]), users: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), undefined]), userLength: faker.helpers.randomize([faker.datatype.number(), undefined]), token: faker.helpers.randomize([faker.random.word(), undefined]), nonce: faker.helpers.randomize([faker.random.word(), undefined])}, undefined]), message: faker.helpers.randomize([{}, undefined])})

export const getAngularTypescriptStarterMSW = () => [
rest.post('*/auth', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAuthMock()),
        )
      }),rest.get('*/user/search', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getSearchUserMock()),
        )
      }),rest.post('*/user/create', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCreateUserMock()),
        )
      }),rest.post('*/user/create/nonce', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetOrCreateNonceMock()),
        )
      }),rest.get('*/user/list', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetAllUsersMock()),
        )
      }),rest.get('*/user/detail/:userId', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetUserMock()),
        )
      }),rest.put('*/user/update/:userId', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getUpdateUserMock()),
        )
      }),rest.delete('*/user/delete/:userId', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDeleteUserMock()),
        )
      }),rest.get('*/user/:usertype', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetUserByUserTypeMock()),
        )
      }),]
